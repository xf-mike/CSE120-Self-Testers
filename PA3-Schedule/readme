这个测试框架是一个对内核的模拟
简单来说, 我们不关注每个进程在做什么
我们只是将内核操作抽象出来
通过跟踪内核操作本身而不是DPrintf打印
从而考察我们自身实现的接口是否正确

我们只需要一个进程就可以模拟内核与多个进程的交互

你可以试着先运行t(t是test的缩写)
然后会有一个testbase.c的文件生成
它是由你的mycode.c经过一些字符串处理
再注入injector.c, 最后形成的
你看一眼就能理解, 很简单

我们编写的test case就是基于testbase.c

所有的test case都只应当调用injector.c中的接口
从而模拟内核操作

你可以修改test.c中的main函数调用的test case
然后重新运行t (直接terminal中t回车就行)
对应的测试log在log文件夹中

你的输出可能跟我的不一样, 因为每个人的实现都会有一些区别

注意, 默认情况下你在mycode.c中的DPrintf会被mute
如果你需要原本的输出, 你可以加verbose flag, 运行: t -v

当然你也可以自己写测试样例, test.c中的例子很多
你可以先看一遍, 自然就会写了



如果你觉得我的log无法理解或者哪里错了, 请务必告诉我


Mike F
